PImage img;
JSONObject json;

int id, joy, anger, surprise, sorrow;
int timeElapsed; // milliseconds
int imageCounter = 1;

//adjusting the values for color in HSB hue, saturation and saturation, this happens within the loadNewImage function
int pixelHue = 5;
int pixelSaturation= 100;
int pixelBrightness = 100;


//array list and variables for the surprise particle system
ArrayList<Particle> particles;
float attforce, repforce;
int numParticle= 5000;

void setup(){
  strokeWeight(int(random(2,20)));
  size (800,600);
  colorMode(HSB);
  
   //grabbing the values of emotions this is what you use to modify the functions
  loadNewImage(imageCounter);
  
  //modifyers of surprise
  repforce = surprise*2;
  attforce = surprise*0.2;

  //surprise particle system make a condition here for only if anger is >1
  particles = new ArrayList<Particle>();
  for (int i= 0; i< numParticle; i++) {
    particles.add(new Particle(random(width), random(height), int(random(width)), int(random(height))));
  }

}  

void draw(){
  int timeImageLoadedFor = millis() - timeElapsed;

  if (timeImageLoadedFor>25000)
  {
    clear();
    try {
      imageCounter++;
      loadNewImage(imageCounter);
      println(imageCounter);
    }
    catch (Exception e) {
      imageCounter--;
      println((imageCounter+1) + ".jpg not found. Reloading current image.");
      loadNewImage(imageCounter);
      println(imageCounter);
    }
    finally {
      timeElapsed = millis();
    }

  } 
  if (sorrow>=1) {
    sorrow();
    //filter(POSTERIZE,5);
    filter(GRAY);
  }
  
  if (surprise >=1) {
    surprise();
  }
  
  noStroke();
  
}

void loadNewImage(int imageCounter) {
  background(0);
  println("Loading " + imageCounter+".jpg");
  img = loadImage(imageCounter+".jpg");
  json = loadJSONObject(imageCounter+".json");
  id = json.getInt("id");
  joy = json.getInt("joy");
  anger = json.getInt("anger");
  surprise = json.getInt("surprise");
  sorrow = json.getInt("sorrow");
  timeElapsed = millis();
  
  //resizing image to fit width and haight, considering all images will be the same format
  img.resize(width,height);
  
  //changing Hue Saturation and Brightness. This function could be applied 
  //at each emotion effect level for more control if preferred
  adjustColor();

}

// SORROW  ----------------------------------------------------------

//sorrow function just picks colors and draws ellipses randomly 
void sorrow() {
  for (int i = 0; i<500; i++) {
    float x = random(width);
    float y = random(height);
    color c = img.get(int(x), int(y));
    noStroke();
    float value = sorrow*30;
    fill(c, value);
    ellipse(x, y, int(random(5, sorrow*7)), int(random(5, sorrow*10)));
    //ellipse(x,y,15,15);
  }
}

// SURPRISE  filler code to change -------------------------------------

void surprise() {
  if (millis() < 2000) {
    image(img, 0, 0);

  }
  //else{
  //  fill(0,20);  
  //  rect(0,0,width,height);
  //}

  for (int i = 0; i <particles.size(); i++) {
    Particle p = particles.get(i);
    p.move();
    p.display();
  }
}

//particle class for anger function
class Particle {
  PVector position, target, velocity, acceleration;
  color color_joy;
  int x_move;
  int y_move;


  Particle(float x, float y, int x_m, int y_m) {
    x_move = x_m;
    y_move = y_m;

    position = new PVector(x, y);
    target = position.copy();
    velocity = new PVector(0, 0);
    acceleration = new PVector(0, 0);
    color_joy =img.get(int(x), int(y));
  }

  void move() {
    PVector attraction = target.sub(position);
    attraction.mult(attforce);
    PVector mouse_pos = new PVector(x_move, y_move);
    PVector tmpForce =  mouse_pos.sub(position);
    tmpForce.limit(20);
    PVector repulsion = tmpForce.copy().normalize().mult(-30).sub(tmpForce);
    repulsion.mult(repforce);

    acceleration = attraction.add(repulsion);
    velocity.mult(10);
    velocity.add(acceleration);
    velocity.limit(3);
    position.add(velocity);
  }
  void display() {
    stroke(color_joy, 90);
    point(position.x, position.y);
  }
}
//void surprise(){
//  for (int i = 0; i < 100; i++){
//    float x = random(width);
//    float y = random(height);
//    color c = img.get(int(x), int(y));
//    fill(c);
//    noStroke();
//    ellipse(x,y,100,16);
//  }
//}



// SATURATION BRUGHTNESS ADJUSTMENT_______________________________

void adjustColor() {
    img.loadPixels();
    for (int i = 0; i < img.pixels.length; i++) {
        float hue = hue(img.pixels[i]);
        float sat= saturation(img.pixels[i]);
        float bright = brightness(img.pixels[i]);
        img.pixels[i] = color(hue + pixelHue, sat +pixelSaturation, bright+ pixelBrightness);
      }
  img.updatePixels(); 

}
